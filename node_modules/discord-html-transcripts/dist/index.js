"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTranscript = exports.generateFromMessages = void 0;
var discord_js_1 = require("discord.js");
var exporthtml_1 = require("./exporthtml");
var generateFromMessages = function (messages, channel, opts) {
    var options = opts || {};
    if (!('returnBuffer' in options))
        options.returnBuffer = false;
    if (!('fileName' in options))
        options.fileName = "transcript-".concat(channel.id, ".html");
    // Turn collection into an array
    if (messages instanceof discord_js_1.Collection) {
        messages = Array.from(messages.values());
    }
    // Check if is array
    if (!Array.isArray(messages)) {
        throw new Error('Provided messages must be either an array or a collection of Messages.');
    }
    // If no messages were provided, generate empty transcript
    if (messages.length === 0) {
        return (0, exporthtml_1.default)(messages, channel, opts);
    }
    // Check if array contains discord messages
    if (!(messages[0] instanceof discord_js_1.Message)) {
        throw new Error('Provided messages does not contain valid Messages.');
    }
    return (0, exporthtml_1.default)(messages, channel, opts);
};
exports.generateFromMessages = generateFromMessages;
var createTranscript = function (channel, opts) { return __awaiter(void 0, void 0, void 0, function () {
    var options, sum_messages, last_id, messages;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                options = opts || {};
                if (!('returnBuffer' in options))
                    options.returnBuffer = false;
                if (!('fileName' in options))
                    options.fileName = 'transcript.html';
                if (!('limit' in options))
                    options.limit = -1;
                if (!channel || !channel.isText || !(channel.isText())) {
                    throw new Error('Provided channel must be a valid channel.');
                }
                sum_messages = [];
                _b.label = 1;
            case 1:
                if (!true) return [3 /*break*/, 3];
                return [4 /*yield*/, channel.messages.fetch({ limit: 100, before: last_id })];
            case 2:
                messages = _b.sent();
                sum_messages.push.apply(sum_messages, Array.from(messages.values()));
                last_id = (_a = messages.last()) === null || _a === void 0 ? void 0 : _a.id;
                if (messages.size != 100 || ((options.limit > 0) && sum_messages.length >= options.limit))
                    return [3 /*break*/, 3];
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/, (0, exporthtml_1.default)(sum_messages, channel, opts)];
        }
    });
}); };
exports.createTranscript = createTranscript;
